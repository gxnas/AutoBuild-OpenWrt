name: Build_x86_64_gxnas

on: 
  release:
    types: [published]

  push:
    branches: 
      - master
    paths:
      - '.github/workflows/Build_OP_x86_64_gxnas.yml'

  schedule:
    - cron: 0 7 * * 6
  
  watch:
    types: [started]

env:
  UPLOAD_NAS: true
  TargetPath: openwrt
  ftp_port: ${{ secrets.FTP_PORT }}
  ftp_username: ${{ secrets.FTP_USERNAME }}
  ftp_psw: ${{ secrets.FTP_PSW }}
  ftp_ip: ${{ secrets.FTP_IP }}
  upload_file_1: OpenWrt_x86_64_gxnas.zip


jobs:
  build:
    runs-on: Ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Import external feeds
      working-directory: ./openwrt
      run: |
        cd package
        git clone https://github.com/kenzok8/small.git
        git clone https://github.com/kenzok8/openwrt-packages.git
        git clone https://github.com/siropboy/mypackages.git
        git clone https://github.com/fw876/helloworld.git
        git clone https://github.com/superstarfly/OpenClash.git
        git clone https://github.com/frainzy1477/luci-app-clash.git
        git clone https://github.com/tty228/luci-app-serverchan.git
        git clone https://github.com/destan19/OpenAppFilter.git
        git clone https://github.com/jerrykuku/node-request.git
        git clone https://github.com/jerrykuku/luci-app-jd-dailybonus.git
        git clone https://github.com/Leo-Jo-My/luci-theme-opentomcat
        git clone https://github.com/Leo-Jo-My/luci-theme-opentomato
        
    - name: Configuration Customization - Build_x86_64_gxnas.config
      env:
        CONFIG_FILE: 'x86_64_gxnas.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig
    
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s
     
    - name: Prepare artifact
      run: |
        find  ./openwrt/bin/targets/ -type f -name "*rootfs*" | xargs rm -rf {}
        cd ./openwrt/bin/targets/x86/64
        rm -rf `ls | grep -v "openwrt-x86-64-generic-squashfs-combined.img"`
        # gzip -d *.gz
        gzip *.img
        df -h
    
    - name: Upload firmware
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt_x86_64_gxnas
        path: ./openwrt/bin/targets/

    - name: Upload firmware to GXNAS-DS918
      id: GXNAS-DS918
      run: |
        cd ./openwrt/bin/targets
        echo $ftp_psw > /tmp/rsync.psw && chmod 600 /tmp/rsync.psw
        rsync -avrzP -e $ftp_port $upload_file_1 $ftp_username@$ftp_ip::$TargetPath/$(date +"%Y.%m.%d-%H%M")_OpenWrt_x86_64_gxnas.zip --password-file=/tmp/rsync.psw
        echo "All Released Files Uploaded to GXNAS-DS918"

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 4
